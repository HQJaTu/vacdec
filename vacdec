#!/usr/bin/env python3

# vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=python

import argparse
import sys
import zlib
import logging
import pprint

import PIL.Image
import pyzbar.pyzbar

import json
import base45
import cbor2
from cose.messages import CoseMessage

log = logging.getLogger(__name__)


# https://alphalist.com/blog/the-use-of-blockchain-for-verification-eu-vaccines-passport-program-and-more

def _setup_logger() -> None:
    log_formatter = logging.Formatter("%(asctime)s [%(levelname)-5.5s]  %(message)s")
    console_handler = logging.StreamHandler(sys.stderr)
    console_handler.setFormatter(log_formatter)
    console_handler.propagate = False
    logging.getLogger().addHandler(console_handler)
    log.setLevel(logging.DEBUG)


def output_covid_cert_data(cert: str) -> None:
    # Strip the first characters to form valid Base45-encoded data
    b45data = cert[4:]

    # Decode the data
    zlibdata = base45.b45decode(b45data)

    # Uncompress the data
    decompressed = zlib.decompress(zlibdata)

    # decode COSE message (no signature verification done)
    cose = CoseMessage.decode(decompressed)
    #pprint.pprint(cose)

    # decode the CBOR encoded payload and print as json
    log.debug(cose.phdr)
    log.debug(cose.uhdr)
    log.debug(cose.key)
    print(json.dumps(cbor2.loads(cose.payload), indent=2))


def main() -> None:
    parser = argparse.ArgumentParser(description='Collected data analysator')
    parser.add_argument('--image-file', metavar="IMAGE-FILE",
                        help='Image to read QR-code from')
    parser.add_argument('--raw-string', metavar="RAW-STRING",
                        help='Contents of the QR-code as string')

    args = parser.parse_args()
    _setup_logger()

    cert = None
    if args.image_file:
        data = pyzbar.pyzbar.decode(PIL.Image.open(args.image_file))
        cert = data[0].data.decode()
    elif args.raw_string:
        cert = args.raw_string
    else:
        log.error("Input parameters: Need either image file or raw QR-code content.")
        exit(2)

    # Got the data, output
    log.debug("Cert data: '{}'".format(cert))
    output_covid_cert_data(cert)


if __name__ == '__main__':
    main()
